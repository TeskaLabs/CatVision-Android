apply plugin: 'com.android.library'

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'master'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--abbrev=7', '--tag', '--dirty', '--always'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def getVersionNameDashes = { ->
    try {
        def vn = getVersionName()
        return vn.replace('.', '-')
    }
    catch (ignored) {
        return null;
    }
}

def getArchiveBaseName = { ->
    return "catvision-io-sdk-android-"+getVersionNameDashes()
}

android {
    compileSdkVersion 26
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode getVersionCode()
        versionName getVersionName()
        setProperty("archivesBaseName", getArchiveBaseName())

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    sourceSets {
        main {
            jniLibs.srcDir 'src/main/libs'
            jni.srcDirs = []
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

task assembleWithSeaCat(dependsOn: assemble) << {

    android.libraryVariants.all { variant ->
        variant.outputs.each { output ->
            // Find SeaCat Client AAR
            def seacatAARFile = new File("${projectDir}/../seacat").list().find{it=~/SeaCat.*\.aar$/}
            if (seacatAARFile == null) {
                throw new GradleException('SeaCat AAR not found in project files.')
            }
            def seacatAARPath = "${projectDir}/../seacat/${seacatAARFile}"

            // Run merge script
            def process
            process = "${projectDir}/../merge_seacat_cvio_builds.sh ${seacatAARPath} ${output.outputFile.path}"
            process = process.execute()
            process.text.eachLine {println it}
            if (process.exitValue() != 0) {
                throw new GradleException("Execution of the merge script returned ${process.exitValue()}.")
            }
            println "$output.name\tassembled with SeaCat: ${seacatAARFile}"
        }
    }
}

task releaseAndAlign(dependsOn: assembleWithSeaCat) << {
    android.libraryVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                
                def env = System.getenv();
                def android_home = env.get('ANDROID_HOME');
                if (android_home == null) {
                    println "Please set environment variable ADROID_HOME (export ANDROID_HOME=~/Library/Android/sdk/)."
                }
                def ZIPALIGN = new File(android_home, '/build-tools/28.0.3/zipalign').toString();
                def APKSIGNER = new File(android_home, '/build-tools/28.0.3/apksigner').toString();

                def outputPathNoExt = output.outputFile.path[0..(output.outputFile.path.lastIndexOf('.')-1)]
                def outputExt = output.outputFile.path[(output.outputFile.path.lastIndexOf('.')+1)..-1]

                // zipalign
                try {
                    exec {
                        executable "rm"
                        args "${outputPathNoExt}-aligned.${outputExt}"
                    }
                } catch (Exception e) {}

                def outputSignedPath = "${outputPathNoExt}-aligned.${outputExt}"
                exec {
                    executable "${ZIPALIGN}"
                    args '-v', '-p', '4', "${output.outputFile.path}", "${outputSignedPath}"
                }
                return
                // apksigner config
//                def pkcsConfigPath = '/tmp/pkcs11_java.cfg'
//                def pkcsConfigFile = new File(pkcsConfigPath)
//                try {
//                    pkcsConfigFile.delete()
//                } catch(Exception e) {}
//                try {
//                    pkcsConfigFile.createNewFile()
//                } catch (Exception e) {return null}
//                def newLine = System.getProperty("line.separator")
//                pkcsConfigFile << 'name = OpenSC-PKCS11' << newLine
//                pkcsConfigFile << 'description = SunPKCS11 via OpenSC' << newLine
//                pkcsConfigFile << 'library = /opt/local/lib/opensc-pkcs11.so' << newLine
//                pkcsConfigFile << 'slotListIndex = 0' << newLine
//                // run apksigner
//                exec {
////                    executable "${APKSIGNER}"
////                    args '--ks-provider-class' 'sun.security.pkcs11.SunPKCS11' '--ks-provider-arg' pkcsCopnfigPath '--ks' 'NONE' '--ks-type' 'PKCS11' "${outputSignedPath}"
//                    executable "jarsigner"
//                    args '-providerClass' 'sun.security.pkcs11.SunPKCS11' '-providerArg' '/tmp/pkcs11_java.cfg' '-keystore' 'NONE' '-storetype' 'PKCS11' ${outputSignedPath} //'"Certificate for Digital Signature"'
//                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile project(':seacat')
}
